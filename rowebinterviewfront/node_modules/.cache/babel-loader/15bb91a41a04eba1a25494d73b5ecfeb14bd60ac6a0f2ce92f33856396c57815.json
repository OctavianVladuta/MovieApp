{"ast":null,"code":"const API_BASE_URL = \"https://localhost:7022/api\";\n\n//filme recente\nexport async function getLatestMovies() {\n  const response = await fetch(`${API_BASE_URL}/movies/latest`);\n  if (!response.ok) {\n    throw new Error(\"Eroare la preluarea filmelor recente\");\n  }\n  return await response.json();\n}\n\n//filme top\nexport async function getTopMovies() {\n  const response = await fetch(`${API_BASE_URL}/movies/top`);\n  if (!response.ok) {\n    throw new Error(\"Eroare la preluarea filmelor top\");\n  }\n  return await response.json();\n}\n\n//cautare filme dupa titlu sau gen\nexport async function searchMovies(title, genreId) {\n  const url = new URL(`${API_BASE_URL}/movies/search`);\n  if (title) url.searchParams.append(\"title\", title);\n  if (genreId) url.searchParams.append(\"genre_ids\", genreId);\n  const response = await fetch(url);\n  if (!response.ok) {\n    throw new Error(\"Eroare la căutarea filmelor\");\n  }\n  return await response.json();\n}\n\n//detalii film\nexport async function getMovieDetails(movieId) {\n  const response = await fetch(`${API_BASE_URL}/movies/${movieId}`);\n  if (!response.ok) {\n    throw new Error(\"Eroare la preluarea detaliilor filmului\");\n  }\n  return await response.json();\n}\n\n//inregistrare utilizator\nexport async function register(email, password, confirmPassword) {\n  const response = await fetch(`${API_BASE_URL}/account/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      confirmPassword\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Eroare la înregistrare\");\n  }\n  return await response.json();\n}\n\n//login utilizator\nexport async function login(email, password) {\n  const response = await fetch(`${API_BASE_URL}/account/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error(\"Eroare la autentificare\");\n  }\n  return await response.json();\n}\n\n//postare comentariu (JWT)\nexport async function postComment(comment) {\n  const token = localStorage.getItem(\"token\");\n  const response = await fetch(`${API_BASE_URL}/comments`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    },\n    body: JSON.stringify(comment)\n  });\n  if (!response.ok) {\n    throw new Error(\"Eroare la postarea comentariului\");\n  }\n  return await response.json();\n}","map":{"version":3,"names":["API_BASE_URL","getLatestMovies","response","fetch","ok","Error","json","getTopMovies","searchMovies","title","genreId","url","URL","searchParams","append","getMovieDetails","movieId","register","email","password","confirmPassword","method","headers","body","JSON","stringify","login","postComment","comment","token","localStorage","getItem"],"sources":["C:/Users/Octavian Vladuta/rowebinterviewfront/src/api.js"],"sourcesContent":["const API_BASE_URL = \"https://localhost:7022/api\";\r\n\r\n//filme recente\r\nexport async function getLatestMovies() {\r\n  const response = await fetch(`${API_BASE_URL}/movies/latest`);\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la preluarea filmelor recente\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n//filme top\r\nexport async function getTopMovies() {\r\n  const response = await fetch(`${API_BASE_URL}/movies/top`);\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la preluarea filmelor top\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n\r\n//cautare filme dupa titlu sau gen\r\nexport async function searchMovies(title, genreId) {\r\n  const url = new URL(`${API_BASE_URL}/movies/search`);\r\n  if (title) url.searchParams.append(\"title\", title);\r\n  if (genreId) url.searchParams.append(\"genre_ids\", genreId);\r\n  \r\n  const response = await fetch(url);\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la căutarea filmelor\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n//detalii film\r\nexport async function getMovieDetails(movieId) {\r\n  const response = await fetch(`${API_BASE_URL}/movies/${movieId}`);\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la preluarea detaliilor filmului\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n\r\n//inregistrare utilizator\r\nexport async function register(email, password, confirmPassword) {\r\n  const response = await fetch(`${API_BASE_URL}/account/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password, confirmPassword })\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la înregistrare\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n//login utilizator\r\nexport async function login(email, password) {\r\n  const response = await fetch(`${API_BASE_URL}/account/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password })\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la autentificare\");\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n\r\n//postare comentariu (JWT)\r\nexport async function postComment(comment) {\r\n  const token = localStorage.getItem(\"token\");\r\n  const response = await fetch(`${API_BASE_URL}/comments`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": `Bearer ${token}`\r\n    },\r\n    body: JSON.stringify(comment)\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(\"Eroare la postarea comentariului\");\r\n  }\r\n  return await response.json();\r\n}\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,4BAA4B;;AAEjD;AACA,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACtC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgB,CAAC;EAC7D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;EACzD;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA,OAAO,eAAeC,YAAYA,CAAA,EAAG;EACnC,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,aAAa,CAAC;EAC1D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAGA;AACA,OAAO,eAAeE,YAAYA,CAACC,KAAK,EAAEC,OAAO,EAAE;EACjD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAGZ,YAAY,gBAAgB,CAAC;EACpD,IAAIS,KAAK,EAAEE,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,OAAO,EAAEL,KAAK,CAAC;EAClD,IAAIC,OAAO,EAAEC,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,WAAW,EAAEJ,OAAO,CAAC;EAE1D,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAACQ,GAAG,CAAC;EACjC,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA,OAAO,eAAeS,eAAeA,CAACC,OAAO,EAAE;EAC7C,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,WAAWgB,OAAO,EAAE,CAAC;EACjE,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;EAC5D;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAGA;AACA,OAAO,eAAeW,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,EAAE;EAC/D,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,mBAAmB,EAAE;IAC/DqB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC,QAAQ;MAAEC;IAAgB,CAAC;EAC3D,CAAC,CAAC;EACF,IAAI,CAAClB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAEA;AACA,OAAO,eAAeoB,KAAKA,CAACR,KAAK,EAAEC,QAAQ,EAAE;EAC3C,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,gBAAgB,EAAE;IAC5DqB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EACF,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B;;AAGA;AACA,OAAO,eAAeqB,WAAWA,CAACC,OAAO,EAAE;EACzC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAM7B,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,YAAY,WAAW,EAAE;IACvDqB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUO,KAAK;IAClC,CAAC;IACDN,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAAC1B,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;EACrD;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAC9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}